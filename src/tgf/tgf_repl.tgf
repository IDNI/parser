@use char class eof, alnum, alpha, space, printable.

@inline char classes.

@trim _, __.
@trim all terminals except children of
	symbol, quoted_string, unescaped_s, escaped_s, parse_input_char_seq.

# TGF grammar
start                  => _ [ statement (_ '.' _ statement)* _ ].

# statement
statement              => grammar_cmd | igrammar_cmd | unreachable_cmd
                        | reload_cmd | load_cmd | start_cmd
                        | help_cmd | version_cmd | license_cmd | quit_cmd
                        | clear_cmd
                        | get_cmd | set_cmd | toggle_cmd | enable_cmd
                        | disable_cmd | add_cmd | del_cmd | parse_file_cmd
                        | parse_cmd.

parse_cmd      => ("p" | "parse")                :parse_sym __ parse_input.
parse_file_cmd => ("f" | "pf" | "parse file")    :parse_file_sym __ filename.
grammar_cmd    => ("g" | "grammar")              :grammar_sym. # [ __ symbol ].
igrammar_cmd   => ("i" | "ig" | "internal-grammar"):igrammar_sym [ __ symbol ].
start_cmd      => ("s" | "start")                :start_sym [ __ symbol ].
unreachable_cmd=> ("u" | "unreachable")          :unreachable_sym [ __ symbol ].
reload_cmd     => ("r" | "reload")               :reload_sym.
load_cmd       => ("l" | "load")                 :load_sym __ filename.
help_cmd       => ("h" | "help")                 :help_sym [ __ help_arg ].
version_cmd    => ("v" | "version")              :version_sym.
license_cmd    => ("L" | "license")              :license_sym.
quit_cmd       => ("q" | "quit" | "e" | "exit")  :quit_sym.
clear_cmd      => ("cls" | "clear")              :clear_sym.
get_cmd        => "get"                          :get_sym [ __ option ].
add_cmd        => "add"                          :add_sym __
        (list_option __ symbol_list | treepaths_option __ treepath_list).
del_cmd        => ("del" | "delete" | "rm" | "rem" | "remove"):del_sym __
        (list_option __ symbol_list | treepaths_option __ treepath_list).
toggle_cmd     => ("tog" | "toggle")             :toggle_sym __ bool_option.
enable_cmd     => ("en"  __ | "enable"  __)      :enable_sym  bool_option.
disable_cmd    => ("dis" __ | "disable" __)      :disable_sym bool_option.
set_cmd        => "set"                          :set_sym __ (
                          bool_option (__ | _ '=' _) bool_value
                        | list_option (__ | _ '=' _) symbol_list
                        | treepaths_option (__ | _ '=' _) treepath_list
                        | enum_ev_option (__ | _ '=' _) error_verbosity).

parse_input            => quoted_string
                        | (printable | '\t')+:parse_input_char_seq.

help_arg               => grammar_sym | igrammar_sym | unreachable_sym
                        | start_sym | parse_sym | parse_file_sym
                        | load_sym | reload_sym | clear_sym
                        | help_sym | quit_sym | version_sym | license_sym
                        | get_sym | set_sym | add_sym | del_sym
                        | toggle_sym | enable_sym | disable_sym.

# options
option                 => bool_option | enum_ev_option
                        | list_option | treepaths_option.
enum_ev_option         => ("e" | "error-verbosity"):error_verbosity_opt.
bool_option            => ("s" | "status"):status_opt
                        | ("c" | "color" | "colors"):colors_opt
                        | ("a" | "ambiguity" | "print-ambiguity")
                                                        :print_ambiguity_opt
                        | ("g" | "graphs" | "print-graphs"):print_graphs_opt
                        | ("r" | "rules" | "print-rules"):print_rules_opt
                        | ("f" | "facts" | "print-facts"):print_facts_opt
                        | ("t" | "terminals" | "print-terminals")
                                                        :print_terminals_opt
                        | ("m" | "measure" | "measure-parsing")
                                                        :measure_parsing_opt
                        | ("me" | "measure-each" | "mep" | "measure-each-pos")
                                                        :measure_each_pos_opt
                        | ("mf" | "measure-forest"):measure_forest_opt
                        | ("mp" | "measure-preprocess"):measure_preprocess_opt
                        | ("d" | "debug"):debug_opt
                        | ("ad" | "auto-disambiguate"):auto_disambiguate_opt
                        | ("tt" | "trim-terminals"):trim_terminals_opt
                        | ("icc" | "inline-cc" | "inline-char-classes")
                                                        :inline_cc_opt.
list_option            => ("nd" | "ndl" | "nodisambig-list"):nodisambig_list_opt
                        | ("guards" | "enabled-productions"):enabled_prods_opt
                        | "trim":trim_opt
                        | ("tc" | "trim-children"):trim_children_opt
                        | ("tct" | "trim-children-terminals")
                                                :trim_children_terminals_opt.
treepaths_option       => ("i" | "inline"):inline_opt.

# boolean option values
bool_value             => ("t" | "true"  | "on"  | "1" | "y" | "yes"):true_value
                        | ("f" | "false" | "off" | "0" | "n" | "no"):false_value.
error_verbosity        => ("b" | "basic"):basic_sym
                        | ("d" | "detailed"):detailed_sym
                        | ("r" | "rc" | "root-cause"):root_cause_sym.

# common rules
symbol                 => (alpha | '_') (alnum | '_')*.
symbol_list            => symbol (_ ',' _ symbol)*.
treepath               => symbol (_ '>' _ symbol)*.
treepath_list          => treepath (_ ',' _ treepath)*.

filename               => quoted_string.

quoted_string          => '"' quoted_string_char* '"'.
quoted_string_char     => unescaped_s | escaped_s.
unescaped_s            => (space | printable) & ~( '"' | '\\' ).
escaped_s              => '\\' ('"' | '\\' | '/' | 'b' | 'f' | 'n' | 'r' | 't').

_                      => [ __ ].               # optional whitespace
__                     => (space | comment) _.  # whitespace (includes comments)
comment                => '#' (printable | '\t')* ('\r' | '\n' | eof).
