@use char class eof, alnum, alpha, space, printable.

@trim __, _, sep.
@trim all terminals except children of
	sym, cc_name, escaped_s, unescaped_s, escaped_c, unescaped_c.
@inline char classes, syms.

# start symbol
start                  => (_ statement)* _.

statement              => directive | production.
start_statement	       => _ statement _.

# productions
production             => sym _ "=>" _ alternation _ '.'.
alternation            => conjunction   (_ '|' _ conjunction)*.
conjunction            => concatenation (_ '&' _ concatenation)*.
concatenation          => factor (__ factor)*.
factor                 => (factor _ ':' sym)       :shorthand_rule
                        | (term '?')               :optional
                        | (term '+')               :repeat
                        | (term '*')               :none_or_repeat
                        | ('~' term)               :neg
                        |                           term.
term                   => ('(' _ alternation _ ')'):group
                        | ('[' _ alternation _ ']'):optional_group
                        | ('{' _ alternation _ '}'):repeat_group
                        |                           terminal
                        |                           sym.

# literals
terminal               => terminal_char | terminal_string.
sym                    => (alpha | '_') (alnum | '_')*.
terminal_char          => "'" (unescaped_c | escaped_c) "'".
unescaped_c            => printable & ~( "'" | '\\').
escaped_c              => '\\' ("'" | '\\' | '/' | 'b' | 'f' | 'n' | 'r' | 't').
terminal_string        => '"' ((unescaped_s | escaped_s):terminal_string_char)* '"'.
unescaped_s            => printable & ~('"' | '\\').
escaped_s              => '\\' ('"' | '\\' | '/' | 'b' | 'f' | 'n' | 'r' | 't').

# directives
directive              => '@' _ directive_body _ '.'.
directive_body         =>
	  ("start" __ sym)                                  :start_dir
	| ("inline" __ inline_arg (_ ',' _ inline_arg)*)    :inline_dir
	| ("trim" sep "children" __ syms)                   :trim_children_dir
	| ("trim" sep "children" sep "terminals" __ syms)
	                			:trim_children_terminals_dir
	| ("trim" sep "all" sep "terminals"
		[sep "except" [sep "children" sep "of"] __ syms])
						:trim_all_terminals_dir
	| ("trim" __ syms)                                  :trim_dir
	| ("use" __ cc_sym:use_from __ use_param (_ ',' _ use_param)*)
	                                                    :use_dir
	| ("disable" __ ["auto" sep] "disambig" "uation"?)  :disable_ad_dir
	| ("ambiguous" _ sym (_ ',' _ sym)*)                :ambiguous_dir
	.

syms                   => sym (_ ',' _ sym)*.
inline_arg             => tree_path | ("char" sep "class" "es"?):cc_sym.
tree_path              => sym (_ '>' _ sym)*.
use_param              => ("eof"   | "alnum" | "alpha" | "blank"
                        | "cntrl" | "digit" | "graph" | "lower" | "printable"
                        | "punct" | "space" | "upper" | "xdigit"):cc_name.

# common productions
sep                    => [sep_required].
sep_required           => '-' | '_' | __.

_                      => [__].                 # optional whitespace
__                     => (space | comment) _.  # whitespace (includes comments)
comment                => '#' (printable | '\t')* ('\r' | '\n' | eof).
