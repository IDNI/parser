@use char class eof, alnum, alpha, space, printable.

# TGF grammar
start                  => (_ statement)* _.
statement              => directive | production.
start_statement	       => _ statement _.

directive              => '@' (use_directive | boolean_directive
                                             | nodisambig_directive).

use_directive          => "use" __ use_from __ use_param (_ ',' _ use_param)* _ '.'.
# TODO keep "@use_char_class" for backward compatibility (consider to remove)
use_directive          => "use_char_class"  __ use_param (_ ',' _ use_param)* _ '.'.
use_from               => use_from_char_class.
use_from_char_class    => "cc" | "ccfn" | "cc_fn" | "char" __ "class".
use_param              => char_class_name.
char_class_name        => "eof"   | "alnum" | "alpha" | "blank"
                        | "cntrl" | "digit" | "graph" | "lower" | "printable"
                        | "punct" | "space" | "upper" | "xdigit".

boolean_directive      => [ boolean_action __ ] boolean_directive_name.
boolean_directive_name => disambiguation_sym.
boolean_action         => enable_sym | disable_sym.
enable_sym             => "enable".
disable_sym            => "disable".
disambiguation_sym     => [ "auto" [ '-' ] ] (
                              "disambiguation" | "disambiguate" | "disambig").

nodisambig_directive   => nodisambig_sym _ sym (_ ',' _ sym)* '.'.
nodisambig_sym         => ("no" [n] | "dont") [ '-' | '_' ]
                          "disamb" [ "ig" [ "uate" ] ] [ ('-' | '_') "list" ].

# production
production             => sym _ "=>" _ expr1 _ '.'.
expr1                  => disjunction | expr2.
expr2                  => conjunction | expr3.
expr3                  => negation | literals.
disjunction            => expr1 _ '|' _ expr2.
conjunction            => expr2 _ '&' _ expr3.
negation               => '~' _ expr3.

# literals
literals               => literal (__ literal)*.
literal                => terminal | nonterminal_.
terminal               => terminal_char | terminal_string.
nonterminal_           => sym | nonliteral.
sym                    => sym_start (sym_rest)*.
sym_start              => alpha | '_'.
sym_rest               => alnum | '_'.

# EBNF operators
nonliteral             => group | optional | repeat | plus | multi.
group                  => '(' _ expr1 _ ')'.
optional               => '[' _ expr1 _ ']'.
repeat                 => '{' _ expr1 _ '}'.
plus                   => literal _ '+'.
multi                  => literal _ '*'.

# terminal char and string
terminal_char          => "'" (unescaped_c | escaped_c) "'".
unescaped_c            => printable & ~( "'" | '\\' ).
escaped_c              => '\\' ("'" | '\\' | '/' | 'b' | 'f' | 'n' | 'r' | 't').
terminal_string        => '"' (unescaped_s | escaped_s)* '"'.
unescaped_s            => printable & ~( '"' | '\\' ).
escaped_s              => '\\' ('"' | '\\' | '/' | 'b' | 'f' | 'n' | 'r' | 't').

_                      => [ __ ].               # optional whitespace
__                     => (space | comment) _.  # whitespace (includes comments)
comment                => '#' (printable | '\t')* ('\r' | '\n' | eof).
