// This file is generated by
//       https://github.com/IDNI/parser/tools/parser_gen
#include <string.h>
#include "parser.h"
struct tml_parser {
	tml_parser() :
		nts(load_nonterminals()), cc(load_cc()),
		g(nts, load_prods(), nt(155), cc), p(g) { }
	std::unique_ptr<typename idni::parser<char>::pforest> parse(
		const char* data, size_t size = 0,
		char eof = std::char_traits<char>::eof())
			{ return p.parse(data, size, eof); }
	std::unique_ptr<typename idni::parser<char>::pforest> parse(
		std::basic_istream<char>& is,
		size_t size = 0,
		char eof = std::char_traits<char>::eof())
			{ return p.parse(is, size, eof); }
	bool found() { return p.found(); }
	typename idni::parser<char>::perror_t get_error()
		{ return p.get_error(); }
private:
	std::vector<char> ts{
		'\0', '\n', '\r', '#', '\\', 'x', 'u', '\'', '"',
		'`', '?', '~', '(', ')', 'r', 'e', 'n', 'w', 'f',
		'o', 'g', 't', 'b', '_', 'a', 'd', 'c', 'l', 's',
		'h', 'j', 'v', 'q', 'p', 'i', 'm', 'k', '!', '=',
		'<', '>', '&', '*', '+', '-', '^', '|', ':', '.',
		',', '{', '}', '[', ']', '@', '$', 'y',
	};
	idni::nonterminals<char> nts{};
	idni::char_class_fns<char> cc;
	idni::grammar<char> g;
	idni::parser<char> p;
	idni::prods<char> t(size_t tid) {
		return idni::prods<char>(ts[tid]);
	}
	idni::prods<char> nt(size_t ntid) {
		return idni::prods<char>(idni::lit<char>(ntid, &nts));
	}
	idni::nonterminals<char> load_nonterminals() const {
		idni::nonterminals<char> nts{};
		for (const auto& nt : {
			"", "eof", "space", "digit", "xdigit", "alpha", "alnum", "punct", "printable", "eol",
			"ws_comment", "_Rws_comment_0", "ws_required", "ws", "hex_escape", "unicode_escape", "char_escape_encode", "esc", "q_char", "q_str",
			"q_bqstr", "char_punct", "_Rchar_punct_1", "_Rchar_punct_2", "_Rchar_punct_3", "char0", "char_", "string_char", "bqstring_char", "chars",
			"_Rchars_4", "_Rchars_5", "integer", "_Rinteger_6", "sym", "var", "number", "quoted_char", "quoted_char_esc", "empty_char",
			"string", "_Rstring_7", "empty_string", "bqstring", "_Rbqstring_8", "empty_bqstring", "term", "negative_term", "positive_term", "relname",
			"args", "elems", "elem", "elems_rest", "char_class", "builtin_expr", "builtin_term", "builtin_prefixes", "builtin_prefix", "renew_prefix",
			"forget_prefix", "builtin", "arith_expr", "arith_op_expr", "arith_waux_expr", "arith_op", "arith_aux_op", "rule", "preds", "fact",
			"pred", "_Rpreds_9", "_Rpreds_10", "block", "prog", "query", "macro", "production", "prod_expr_elem", "_Rproduction_11",
			"_Rproduction_12", "directive", "string_drctv", "stdout_drctv", "trace_drctv", "internal_drctv", "bwd_drctv", "strdir", "fname", "cmdline",
			"cmdlinefile", "printable_char", "_Rfname_13", "typedef_", "predtypedef", "structypedef", "predtypedef_args", "type", "_Rpredtypedef_args_14", "_Rpredtypedef_args_15",
			"structypename", "membdecl", "_Rstructypedef_16", "_Rstructypedef_17", "structype", "_Rmembdecl_18", "_Rmembdecl_19", "primtype", "simple_type", "bitsz_type",
			"int_type", "char_type", "sym_type", "bitsz", "state_block", "sb_header", "sb_statement", "_Rstate_block_20", "_Rstate_block_21", "sb_flipping",
			"sb_nonflipping", "sb_label", "fof", "form", "form1", "causal_op", "_Rform_22", "_Rform_23", "matrix", "junct_op",
			"_Rform1_24", "_Rform1_25", "implies", "coimplies", "and_", "or_", "neg_matrix", "matrix_block", "prefix_decl", "prefix",
			"prefix_arg", "guard_statement", "if_then_else", "if_then", "while_do", "condition", "gs_prog", "statement", "statement0", "rule0",
			"fact0", "fof0", "program", "statements", "statements1", "start",
		}) nts.get(nt);
		return nts;
	}
	idni::char_class_fns<char> load_cc() {
		return idni::predefined_char_classes<char>({
			"eof",
			"space",
			"digit",
			"xdigit",
			"alpha",
			"alnum",
			"punct",
			"printable",
		}, nts);
	}
	idni::prods<char> load_prods() {
		idni::prods<char> q, nul(idni::lit<char>{});
		q(nt(9), (nt(1)));
		q(nt(9), (t(1)));
		q(nt(9), (t(2)));
		q(nt(11), (t(3)+nt(8)));
		q(nt(11), (t(3)+nt(8)+nt(11)));
		q(nt(10), (nt(11)+nt(9)));
		q(nt(10), (t(3)+nt(9)));
		q(nt(12), (nt(2)+nt(13)));
		q(nt(12), (nt(10)+nt(13)));
		q(nt(13), (nt(12)));
		q(nt(13), (nul));
		q(nt(14), (t(4)+t(4)+t(5)+nt(4)+nt(4)));
		q(nt(15), (t(4)+t(4)+t(6)+nt(4)+nt(4)+nt(4)+nt(4)));
		q(nt(16), (nt(14)));
		q(nt(16), (nt(15)));
		q(nt(17), (t(4)+t(4)+t(4)+t(4)));
		q(nt(18), (t(7)));
		q(nt(19), (t(8)));
		q(nt(20), (t(9)));
		q(nt(22), (nt(17)+nt(18)));
		q(nt(23), (nt(17)+nt(19)));
		q(nt(24), (nt(17)+nt(20)));
		q(nt(21), (nt(7)) & (nt(18)) & (nt(19)) & (nt(20)) & (nt(22)) & (nt(23)) & (nt(24)));
		q(nt(25), (nt(2)));
		q(nt(25), (nt(6)));
		q(nt(25), (nt(16)));
		q(nt(25), (nt(21)));
		q(nt(26), (nt(17)+nt(18)));
		q(nt(26), (nt(19)));
		q(nt(26), (nt(20)));
		q(nt(26), (nt(25)));
		q(nt(27), (nt(17)+nt(19)));
		q(nt(27), (nt(18)));
		q(nt(27), (nt(20)));
		q(nt(27), (nt(25)));
		q(nt(28), (nt(17)+nt(20)));
		q(nt(28), (nt(18)));
		q(nt(28), (nt(19)));
		q(nt(28), (nt(25)));
		q(nt(30), (nt(6)));
		q(nt(31), (nt(30)+nt(31)));
		q(nt(31), (nul));
		q(nt(29), (nt(5)+nt(31)));
		q(nt(33), (nt(3)));
		q(nt(33), (nt(3)+nt(33)));
		q(nt(32), (nt(33)));
		q(nt(34), (nt(29)));
		q(nt(35), (t(10)+nt(29)));
		q(nt(36), (nt(32)));
		q(nt(37), (nt(18)+nt(16)+nt(18)));
		q(nt(37), (nt(18)+nt(26)+nt(18)));
		q(nt(37), (nt(38)));
		q(nt(37), (nt(39)));
		q(nt(39), (nt(18)+nt(18)));
		q(nt(38), (nt(18)+nt(17)+nt(8)+nt(18)));
		q(nt(41), (nt(19)+nt(27)));
		q(nt(41), (nt(19)+nt(27)+nt(41)));
		q(nt(40), (nt(41)+nt(19)));
		q(nt(40), (nt(42)));
		q(nt(42), (nt(19)+nt(19)));
		q(nt(44), (nt(20)+nt(28)));
		q(nt(44), (nt(20)+nt(28)+nt(44)));
		q(nt(43), (nt(44)+nt(20)));
		q(nt(43), (nt(45)));
		q(nt(45), (nt(20)+nt(20)));
		q(nt(46), (nt(47)));
		q(nt(46), (nt(48)));
		q(nt(47), (t(11)+nt(13)+nt(48)));
		q(nt(48), (nt(49)));
		q(nt(48), (nt(49)+nt(50)));
		q(nt(50), (nt(13)+t(12)+nt(13)+nt(51)+nt(13)+t(13)));
		q(nt(50), (nt(13)+t(12)+nt(13)+t(13)));
		q(nt(51), (nt(49)+nt(50)));
		q(nt(51), (nt(49)+nt(50)+nt(13)+nt(53)));
		q(nt(51), (nt(52)));
		q(nt(51), (nt(52)+nt(12)+nt(53)));
		q(nt(53), (nt(50)));
		q(nt(53), (nt(52)));
		q(nt(53), (nt(52)+nt(12)+nt(53)));
		q(nt(53), (nt(52)+nt(50)));
		q(nt(52), (nt(34)));
		q(nt(52), (nt(35)));
		q(nt(52), (nt(36)));
		q(nt(52), (nt(37)));
		q(nt(52), (nt(40)));
		q(nt(52), (nt(54)));
		q(nt(49), (nt(34)));
		q(nt(55), (nt(56)));
		q(nt(55), (nt(57)+nt(13)+nt(56)));
		q(nt(57), (nt(58)));
		q(nt(57), (nt(58)+nt(13)+nt(57)));
		q(nt(58), (nt(59)));
		q(nt(58), (nt(60)));
		q(nt(59), (t(14)+t(15)+t(16)+t(15)+t(17)));
		q(nt(60), (t(18)+t(19)+t(14)+t(20)+t(15)+t(21)));
		q(nt(56), (nt(61)));
		q(nt(56), (nt(61)+nt(50)));
		q(nt(61), (t(22)+t(17)+t(23)+t(24)+t(16)+t(25)));
		q(nt(61), (t(22)+t(17)+t(23)+t(16)+t(19)+t(21)));
		q(nt(61), (t(22)+t(17)+t(23)+t(19)+t(14)));
		q(nt(61), (t(22)+t(17)+t(23)+t(5)+t(19)+t(14)));
		q(nt(61), (t(26)+t(19)+t(6)+t(16)+t(21)));
		q(nt(61), (t(15)+t(14)+t(14)+t(19)+t(14)));
		q(nt(61), (t(18)+t(24)+t(27)+t(28)+t(15)));
		q(nt(61), (t(18)+t(19)+t(14)+t(20)+t(15)+t(21)));
		q(nt(61), (t(29)+t(24)+t(27)+t(21)));
		q(nt(61), (t(30)+t(28)+t(23)+t(15)+t(31)+t(24)+t(27)));
		q(nt(61), (t(27)+t(15)+t(32)));
		q(nt(61), (t(33)+t(14)+t(34)+t(16)+t(21)));
		q(nt(61), (t(33)+t(14)+t(34)+t(16)+t(21)+t(23)+t(25)+t(15)+t(27)+t(34)+t(35)));
		q(nt(61), (t(33)+t(14)+t(34)+t(16)+t(21)+t(23)+t(21)+t(19)));
		q(nt(61), (t(33)+t(14)+t(34)+t(16)+t(21)+t(23)+t(21)+t(19)+t(23)+t(25)+t(15)+t(27)+t(34)+t(35)));
		q(nt(61), (t(33)+t(14)+t(34)+t(16)+t(21)+t(27)+t(16)));
		q(nt(61), (t(33)+t(14)+t(34)+t(16)+t(21)+t(27)+t(16)+t(23)+t(25)+t(15)+t(27)+t(34)+t(35)));
		q(nt(61), (t(33)+t(14)+t(34)+t(16)+t(21)+t(27)+t(16)+t(23)+t(21)+t(19)));
		q(nt(61), (t(33)+t(14)+t(34)+t(16)+t(21)+t(27)+t(16)+t(23)+t(21)+t(19)+t(23)+t(25)+t(15)+t(27)+t(34)+t(35)));
		q(nt(61), (t(33)+t(17)+t(23)+t(24)+t(25)+t(25)));
		q(nt(61), (t(33)+t(17)+t(23)+t(35)+t(6)+t(27)+t(21)));
		q(nt(61), (t(14)+t(16)+t(25)));
		q(nt(54), (t(24)+t(27)+t(16)+t(6)+t(35)));
		q(nt(54), (t(24)+t(27)+t(33)+t(29)+t(24)));
		q(nt(54), (t(22)+t(27)+t(24)+t(16)+t(36)));
		q(nt(54), (t(26)+t(16)+t(21)+t(14)+t(27)));
		q(nt(54), (t(25)+t(34)+t(20)+t(34)+t(21)));
		q(nt(54), (t(15)+t(19)+t(18)));
		q(nt(54), (t(20)+t(14)+t(24)+t(33)+t(29)));
		q(nt(54), (t(27)+t(19)+t(17)+t(15)+t(14)));
		q(nt(54), (t(33)+t(14)+t(34)+t(16)+t(21)+t(24)+t(22)+t(27)+t(15)));
		q(nt(54), (t(33)+t(6)+t(16)+t(26)+t(21)));
		q(nt(54), (t(28)+t(33)+t(24)+t(26)+t(15)));
		q(nt(54), (t(6)+t(33)+t(33)+t(15)+t(14)));
		q(nt(54), (t(5)+t(25)+t(34)+t(20)+t(34)+t(21)));
		q(nt(62), (nt(63)));
		q(nt(62), (nt(64)));
		q(nt(63), (nt(52)+nt(13)+nt(65)+nt(13)+nt(52)));
		q(nt(64), (nt(52)+nt(13)+nt(66)+nt(13)+nt(52)+nt(13)+nt(65)+nt(13)+nt(52)));
		q(nt(64), (nt(52)+nt(13)+nt(66)+nt(13)+nt(52)+nt(13)+nt(65)+nt(13)+nt(52)+nt(13)+nt(52)));
		q(nt(65), (t(37)+t(38)));
		q(nt(65), (t(39)));
		q(nt(65), (t(39)+t(38)));
		q(nt(65), (t(38)));
		q(nt(65), (t(38)+t(38)));
		q(nt(65), (t(40)));
		q(nt(65), (t(40)+t(38)));
		q(nt(66), (t(41)));
		q(nt(66), (t(42)));
		q(nt(66), (t(43)));
		q(nt(66), (t(44)));
		q(nt(66), (t(39)+t(39)));
		q(nt(66), (t(40)+t(40)));
		q(nt(66), (t(45)));
		q(nt(66), (t(46)));
		q(nt(67), (nt(68)+nt(13)+t(47)+t(44)+nt(13)+nt(68)+nt(13)+t(48)));
		q(nt(69), (nt(70)+nt(13)+t(48)));
		q(nt(71), (nt(13)+t(49)+nt(13)+nt(70)));
		q(nt(72), (nt(71)+nt(72)));
		q(nt(72), (nul));
		q(nt(68), (nt(70)+nt(72)));
		q(nt(70), (nt(46)));
		q(nt(70), (nt(55)));
		q(nt(70), (nt(62)));
		q(nt(73), (t(50)+nt(74)+nt(13)+t(51)));
		q(nt(75), (t(37)+nt(13)+nt(46)+nt(13)+t(48)));
		q(nt(75), (t(37)+t(37)+nt(13)+nt(46)+nt(13)+t(48)));
		q(nt(76), (nt(48)+nt(13)+t(47)+t(38)+nt(13)+nt(68)+nt(13)+t(48)));
		q(nt(79), (nt(13)+nt(78)));
		q(nt(80), (nt(79)));
		q(nt(80), (nt(79)+nt(80)));
		q(nt(77), (nt(49)+nt(13)+t(38)+t(40)+nt(80)+nt(13)+t(48)));
		q(nt(78), (nt(29)));
		q(nt(78), (nt(37)));
		q(nt(78), (nt(40)));
		q(nt(78), (t(41)));
		q(nt(78), (t(12)));
		q(nt(78), (t(13)));
		q(nt(78), (t(42)));
		q(nt(78), (t(43)));
		q(nt(78), (t(52)));
		q(nt(78), (t(53)));
		q(nt(78), (t(50)));
		q(nt(78), (t(46)));
		q(nt(78), (t(51)));
		q(nt(78), (t(11)));
		q(nt(81), (nt(82)));
		q(nt(81), (nt(83)));
		q(nt(81), (nt(84)));
		q(nt(81), (nt(85)));
		q(nt(81), (nt(86)));
		q(nt(82), (t(54)+t(28)+t(21)+t(14)+t(34)+t(16)+t(20)+nt(12)+nt(87)+nt(13)+t(48)));
		q(nt(83), (t(54)+t(28)+t(21)+t(25)+t(19)+t(6)+t(21)+nt(12)+nt(48)+nt(13)+t(48)));
		q(nt(84), (t(54)+t(21)+t(14)+t(24)+t(26)+t(15)+nt(12)+nt(49)+nt(13)+t(48)));
		q(nt(85), (t(54)+t(34)+t(16)+t(21)+t(15)+t(14)+t(16)+t(24)+t(27)+nt(12)+nt(48)+nt(13)+t(48)));
		q(nt(86), (t(54)+t(22)+t(17)+t(25)+nt(13)+t(48)));
		q(nt(87), (nt(49)+nt(13)+nt(40)));
		q(nt(87), (nt(49)+nt(13)+nt(48)));
		q(nt(87), (nt(49)+nt(13)+nt(88)));
		q(nt(87), (nt(49)+nt(13)+nt(89)));
		q(nt(87), (nt(49)+nt(13)+nt(90)));
		q(nt(92), (t(39)+nt(91)));
		q(nt(92), (t(39)+nt(91)+nt(92)));
		q(nt(88), (nt(92)+t(40)));
		q(nt(89), (t(55)+nt(32)));
		q(nt(90), (t(39)+t(55)+nt(32)+t(40)));
		q(nt(93), (nt(94)));
		q(nt(93), (nt(95)));
		q(nt(94), (t(33)+t(14)+t(15)+t(25)+t(21)+t(56)+t(33)+t(15)+nt(12)+nt(49)+nt(13)+nt(96)+nt(13)+t(48)));
		q(nt(98), (nt(13)+t(49)+nt(13)+nt(97)+nt(13)+nt(35)));
		q(nt(99), (nt(98)+nt(99)));
		q(nt(99), (nul));
		q(nt(96), (t(12)+nt(13)+t(13)+nt(99)+nt(13)+t(13)));
		q(nt(96), (t(12)+nt(13)+t(13)+t(12)+nt(13)+nt(97)+nt(13)+nt(35)));
		q(nt(102), (nt(13)+nt(101)));
		q(nt(103), (nt(102)+nt(103)));
		q(nt(103), (nul));
		q(nt(95), (t(28)+t(21)+t(14)+t(6)+t(26)+t(21)+nt(13)+nt(100)+nt(13)+t(50)+nt(13)+nt(101)+nt(103)+nt(13)+t(51)));
		q(nt(100), (nt(49)));
		q(nt(104), (nt(49)));
		q(nt(105), (nt(13)+t(49)+nt(13)+nt(35)));
		q(nt(106), (nt(105)+nt(106)));
		q(nt(106), (nul));
		q(nt(101), (nt(97)+nt(13)+nt(35)+nt(106)+nt(13)+t(48)));
		q(nt(97), (nt(104)));
		q(nt(97), (nt(107)));
		q(nt(107), (nt(108)));
		q(nt(107), (nt(109)));
		q(nt(108), (nt(110)));
		q(nt(108), (nt(111)));
		q(nt(108), (nt(112)));
		q(nt(110), (t(34)+t(16)+t(21)));
		q(nt(111), (t(26)+t(29)+t(24)+t(14)));
		q(nt(112), (t(28)+t(56)+t(35)));
		q(nt(109), (t(34)+t(16)+t(21)+t(47)+nt(13)+nt(113)));
		q(nt(113), (nt(32)));
		q(nt(117), (nt(13)+nt(116)));
		q(nt(118), (nt(117)+nt(118)));
		q(nt(118), (nul));
		q(nt(114), (t(52)+nt(115)+nt(118)+nt(13)+t(53)));
		q(nt(115), (nt(119)));
		q(nt(115), (nt(120)));
		q(nt(119), (nt(121)+t(11)+t(47)));
		q(nt(120), (nt(121)+t(47)));
		q(nt(121), (nt(49)));
		q(nt(116), (nt(67)));
		q(nt(116), (nt(69)));
		q(nt(116), (nt(114)));
		q(nt(116), (nt(122)));
		q(nt(122), (nt(68)+nt(13)+t(47)+t(44)+nt(13)+nt(123)+nt(13)+t(48)));
		q(nt(126), (nt(13)+nt(125)+nt(13)+nt(124)));
		q(nt(127), (nt(126)+nt(127)));
		q(nt(127), (nul));
		q(nt(123), (nt(124)+nt(127)));
		q(nt(130), (nt(13)+nt(129)+nt(13)+nt(128)));
		q(nt(131), (nt(130)+nt(131)));
		q(nt(131), (nul));
		q(nt(124), (nt(128)+nt(131)));
		q(nt(125), (nt(132)));
		q(nt(125), (nt(133)));
		q(nt(129), (nt(134)));
		q(nt(129), (nt(135)));
		q(nt(134), (t(41)+t(41)));
		q(nt(135), (t(46)+t(46)));
		q(nt(132), (t(44)+t(40)));
		q(nt(133), (t(39)+t(44)+t(40)));
		q(nt(128), (nt(48)));
		q(nt(128), (nt(62)));
		q(nt(128), (nt(136)));
		q(nt(128), (nt(137)));
		q(nt(128), (nt(138)));
		q(nt(136), (t(11)+nt(128)));
		q(nt(137), (t(50)+nt(13)+nt(123)+nt(13)+t(51)));
		q(nt(138), (nt(139)+nt(13)+nt(140)));
		q(nt(138), (nt(139)+nt(13)+nt(140)+nt(13)+nt(123)));
		q(nt(139), (t(15)+t(5)+t(34)+t(28)+t(21)+t(28)));
		q(nt(139), (t(18)+t(19)+t(14)+t(24)+t(27)+t(27)));
		q(nt(139), (t(6)+t(16)+t(34)+t(32)+t(6)+t(15)));
		q(nt(140), (nt(35)));
		q(nt(140), (nt(49)));
		q(nt(141), (nt(142)));
		q(nt(141), (nt(143)));
		q(nt(141), (nt(144)));
		q(nt(143), (t(34)+t(18)+nt(13)+nt(145)+nt(13)+t(21)+t(29)+t(15)+t(16)+nt(13)+nt(146)));
		q(nt(142), (nt(143)+nt(13)+t(15)+t(27)+t(28)+t(15)+nt(13)+nt(146)));
		q(nt(144), (t(17)+t(29)+t(34)+t(27)+t(15)+nt(13)+nt(145)+nt(13)+t(25)+t(19)+nt(13)+nt(146)));
		q(nt(145), (nt(123)));
		q(nt(146), (nt(74)));
		q(nt(146), (nt(147)));
		q(nt(146), (nt(148)));
		q(nt(148), (nt(149)));
		q(nt(148), (nt(150)));
		q(nt(148), (nt(151)));
		q(nt(149), (nt(68)+nt(13)+t(47)+t(44)+nt(13)+nt(68)));
		q(nt(150), (nt(70)));
		q(nt(151), (nt(68)+nt(13)+t(47)+t(44)+nt(13)+nt(123)));
		q(nt(147), (nt(67)));
		q(nt(147), (nt(69)));
		q(nt(147), (nt(73)));
		q(nt(147), (nt(75)));
		q(nt(147), (nt(76)));
		q(nt(147), (nt(77)));
		q(nt(147), (nt(81)));
		q(nt(147), (nt(93)));
		q(nt(147), (nt(114)));
		q(nt(147), (nt(122)));
		q(nt(147), (nt(141)));
		q(nt(152), (nt(13)+nt(153)+nt(13)));
		q(nt(153), (nt(147)+nt(154)));
		q(nt(154), (nt(13)+nt(147)+nt(154)));
		q(nt(154), (nul));
		q(nt(155), (nt(152)));
		return q;
	}
};
