// This file is generated by
//       https://github.com/IDNI/parser/tools/parser_gen
#include <string.h>
#include "parser.h"
struct csv_parser {
	csv_parser() :
		nts(load_nonterminals()), cc(load_cc()),
		g(nts, load_prods(), nt(21), cc), p(g, load_opts()) {}
	std::unique_ptr<typename idni::parser<char>::pforest> parse(
		const char* data, size_t size = 0,
		char eof = std::char_traits<char>::eof())
			{ return p.parse(data, size, eof); }
	std::unique_ptr<typename idni::parser<char>::pforest> parse(
		int fd, size_t size = 0,
		char eof = std::char_traits<char>::eof())
			{ return p.parse(fd, size, eof); }
	std::unique_ptr<typename idni::parser<char>::pforest> parse(
		std::basic_istream<char>& is,
		size_t size = 0,
		char eof = std::char_traits<char>::eof())
			{ return p.parse(is, size, eof); }
	bool found() { return p.found(); }
	typename idni::parser<char>::error get_error()
		{ return p.get_error(); }
	size_t id(const std::basic_string<char>& name) { return nts.get(name); }
private:
	std::vector<char> ts{
		'\0', '-', '"', '\\', '\r', '\n', ',',
	};
	idni::nonterminals<char> nts{};
	idni::char_class_fns<> cc;
	idni::grammar<char> g;
	idni::parser<char> p;
	idni::prods<char> t(size_t tid) {
		return idni::prods<char>(ts[tid]);
	}
	idni::prods<char> nt(size_t ntid) {
		return idni::prods<char>(idni::lit<char>(ntid, &nts));
	}
	idni::nonterminals<char> load_nonterminals() const {
		idni::nonterminals<char> nts{};
		for (const auto& nt : {
			"", "digit", "printable", "integer", "integer_0", "integer_1", "quote", "stresc", "strchar", "strchar_2",
			"str", "str_3", "str_4", "nullvalue", "val", "eol", "eol_5", "row_", "row__6", "rows_",
			"rows__7", "start",
		}) nts.get(nt);
		return nts;
	}
	idni::char_class_fns<> load_cc() {
		return idni::predefined_char_classes<char>({
			"digit",
			"printable",
		}, nts);
	}
	idni::parser<char>::options load_opts() {
		idni::parser<char>::options o;
		return o;
	}
	idni::prods<char> load_prods() {
		idni::prods<char> q, nul(idni::lit<char>{});
		// integer_0 => ε.
		q(nt(4), (nul));
		// integer_0 => '-'.
		q(nt(4), (t(1)));
		// integer_1 => digit.
		q(nt(5), (nt(1)));
		// integer_1 => digit integer_1.
		q(nt(5), (nt(1)+nt(5)));
		// integer => integer_0 integer_1.
		q(nt(3), (nt(4)+nt(5)));
		// quote => '"'.
		q(nt(6), (t(2)));
		// stresc => '\\' quote.
		q(nt(7), (t(3)+nt(6)));
		// strchar_2 => printable & ~( quote ).
		q(nt(9), (nt(2)) & ~(nt(6)));
		// strchar => stresc.
		q(nt(8), (nt(7)));
		// strchar => strchar_2.
		q(nt(8), (nt(9)));
		// str_3 => strchar.
		q(nt(11), (nt(8)));
		// str_3 => strchar str_3.
		q(nt(11), (nt(8)+nt(11)));
		// str_4 => str_3.
		q(nt(12), (nt(11)));
		// str_4 => ε.
		q(nt(12), (nul));
		// str => quote str_4 quote.
		q(nt(10), (nt(6)+nt(12)+nt(6)));
		// nullvalue => ε.
		q(nt(13), (nul));
		// val => integer.
		q(nt(14), (nt(3)));
		// val => str.
		q(nt(14), (nt(10)));
		// val => nullvalue.
		q(nt(14), (nt(13)));
		// eol_5 => ε.
		q(nt(16), (nul));
		// eol_5 => '\r'.
		q(nt(16), (t(4)));
		// eol => eol_5 '\n'.
		q(nt(15), (nt(16)+t(5)));
		// row__6 => val.
		q(nt(18), (nt(14)));
		// row__6 => val row__6.
		q(nt(18), (nt(14)+nt(18)));
		// row_ => val ',' row__6.
		q(nt(17), (nt(14)+t(6)+nt(18)));
		// rows__7 => row_.
		q(nt(20), (nt(17)));
		// rows__7 => row_ rows__7.
		q(nt(20), (nt(17)+nt(20)));
		// rows_ => row_ eol rows__7.
		q(nt(19), (nt(17)+nt(15)+nt(20)));
		// start => rows_.
		q(nt(21), (nt(19)));
		return q;
	}
};
